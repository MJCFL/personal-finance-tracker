import { NextRequest, NextResponse } from 'next/server';
import clientPromise from '@/lib/mongodb';
import InvestmentAccount from '@/models/InvestmentAccount';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

// PUT /api/investments/[id]/stocks/[ticker]/lots/[lotId] - Update a stock lot
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string; ticker: string; lotId: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session || !session.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { id, ticker, lotId } = params;
    const updateData = await request.json();

    const client = await clientPromise;
    const db = client.db();

    // Find the investment account and ensure it belongs to the user
    const account = await InvestmentAccount.findOne({
      _id: id,
      userId: session.user.id,
    });

    if (!account) {
      return NextResponse.json(
        { error: 'Investment account not found' },
        { status: 404 }
      );
    }

    // Find the stock in the account
    const stockIndex = account.stocks.findIndex(
      (stock: any) => stock.ticker.toUpperCase() === ticker.toUpperCase()
    );

    if (stockIndex === -1) {
      return NextResponse.json({ error: 'Stock not found' }, { status: 404 });
    }

    // Find the lot in the stock
    const lotIndex = account.stocks[stockIndex].lots.findIndex(
      (lot: any) => lot.id === lotId
    );

    if (lotIndex === -1) {
      return NextResponse.json({ error: 'Stock lot not found' }, { status: 404 });
    }

    // Update the lot with the new data
    if (updateData.shares !== undefined) {
      account.stocks[stockIndex].lots[lotIndex].shares = updateData.shares;
    }
    if (updateData.purchasePrice !== undefined) {
      account.stocks[stockIndex].lots[lotIndex].purchasePrice = updateData.purchasePrice;
    }
    if (updateData.purchaseDate !== undefined) {
      account.stocks[stockIndex].lots[lotIndex].purchaseDate = new Date(updateData.purchaseDate);
    }
    if (updateData.notes !== undefined) {
      account.stocks[stockIndex].lots[lotIndex].notes = updateData.notes;
    }

    // Save the updated account
    await account.save();

    return NextResponse.json(account);
  } catch (error: any) {
    console.error('Error updating stock lot:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to update stock lot' },
      { status: 500 }
    );
  }
}

// DELETE /api/investments/[id]/stocks/[ticker]/lots/[lotId] - Delete a stock lot
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string; ticker: string; lotId: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session || !session.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { id, ticker, lotId } = params;

    const client = await clientPromise;
    const db = client.db();

    // Find the investment account and ensure it belongs to the user
    const account = await InvestmentAccount.findOne({
      _id: id,
      userId: session.user.id,
    });

    if (!account) {
      return NextResponse.json(
        { error: 'Investment account not found' },
        { status: 404 }
      );
    }

    // Find the stock in the account
    const stockIndex = account.stocks.findIndex(
      (stock: any) => stock.ticker.toUpperCase() === ticker.toUpperCase()
    );

    if (stockIndex === -1) {
      return NextResponse.json({ error: 'Stock not found' }, { status: 404 });
    }

    // Find the lot in the stock
    const lotIndex = account.stocks[stockIndex].lots.findIndex(
      (lot: any) => lot.id === lotId
    );

    if (lotIndex === -1) {
      return NextResponse.json({ error: 'Stock lot not found' }, { status: 404 });
    }

    // Remove the lot from the stock
    account.stocks[stockIndex].lots.splice(lotIndex, 1);

    // If there are no more lots, remove the stock
    if (account.stocks[stockIndex].lots.length === 0) {
      account.stocks.splice(stockIndex, 1);
    }

    // Save the updated account
    await account.save();

    return NextResponse.json(account);
  } catch (error: any) {
    console.error('Error deleting stock lot:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to delete stock lot' },
      { status: 500 }
    );
  }
}

// GET /api/investments/[id]/stocks/[ticker]/lots/[lotId] - Get a specific stock lot
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string; ticker: string; lotId: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session || !session.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { id, ticker, lotId } = params;

    const client = await clientPromise;
    const db = client.db();

    // Find the investment account and ensure it belongs to the user
    const account = await InvestmentAccount.findOne({
      _id: id,
      userId: session.user.id,
    });

    if (!account) {
      return NextResponse.json(
        { error: 'Investment account not found' },
        { status: 404 }
      );
    }

    // Find the stock in the account
    const stock = account.stocks.find(
      (stock: any) => stock.ticker.toUpperCase() === ticker.toUpperCase()
    );

    if (!stock) {
      return NextResponse.json({ error: 'Stock not found' }, { status: 404 });
    }

    // Find the lot in the stock
    const lot = stock.lots.find((lot: any) => lot.id === lotId);

    if (!lot) {
      return NextResponse.json({ error: 'Stock lot not found' }, { status: 404 });
    }

    return NextResponse.json(lot);
  } catch (error: any) {
    console.error('Error getting stock lot:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to get stock lot' },
      { status: 500 }
    );
  }
}
