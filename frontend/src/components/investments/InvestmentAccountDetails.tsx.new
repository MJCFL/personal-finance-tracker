'use client';

import React, { useState, useEffect } from 'react';
import { InvestmentAccountData, updateInvestmentAccount, deleteInvestmentAccount } from '@/services/investmentService';
import { toast } from 'react-hot-toast';
import { InvestmentAccountType, IStock, ICrypto } from '@/types/investment';
import StockList from './StockList';
import CryptoList from './CryptoList';
import AddStockModal from './AddStockModal';
import AddCryptoModal from './AddCryptoModal';
import TransactionHistory from './TransactionHistory';
import CashManagement from './CashManagement';
import CryptoDetail from './CryptoDetail';

interface InvestmentAccountDetailsProps {
  account: InvestmentAccountData;
  onAccountUpdated: () => void;
  onAccountDeleted?: () => void;
}

const InvestmentAccountDetails: React.FC<InvestmentAccountDetailsProps> = ({
  account,
  onAccountUpdated,
  onAccountDeleted,
}) => {
  const [activeTab, setActiveTab] = useState<'stocks' | 'transactions' | 'cash'>('stocks');
  const [isAddStockModalOpen, setIsAddStockModalOpen] = useState(false);
  const [isAddCryptoModalOpen, setIsAddCryptoModalOpen] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editedName, setEditedName] = useState(account.name);
  const [editedInstitution, setEditedInstitution] = useState(account.institution);
  const [editedType, setEditedType] = useState(account.type);
  const [selectedCrypto, setSelectedCrypto] = useState<ICrypto | null>(null);

  // Helper function to format account type for display
  const formatAccountType = (type: InvestmentAccountType): string => {
    switch (type) {
      case InvestmentAccountType.BROKERAGE:
        return 'Brokerage';
      case InvestmentAccountType.RETIREMENT_401K:
        return '401(k)';
      case InvestmentAccountType.ROTH_IRA:
        return 'Roth IRA';
      case InvestmentAccountType.TRADITIONAL_IRA:
        return 'Traditional IRA';
      case InvestmentAccountType.EDUCATION_529:
        return '529 Plan';
      case InvestmentAccountType.HSA:
        return 'HSA';
      case InvestmentAccountType.OTHER:
        return 'Other';
      case InvestmentAccountType.CRYPTO_WALLET:
        return 'Crypto Wallet';
      default:
        return type;
    }
  };

  // Calculate total value of the account
  const calculateTotalValue = (): number => {
    const stocksValue = account.stocks?.reduce((total, stock) => {
      // Use totalShares if available, otherwise calculate from lots
      const totalShares = stock.totalShares !== undefined 
        ? stock.totalShares 
        : stock.lots?.reduce((sum, lot) => sum + lot.shares, 0) || 0;
      return total + (totalShares * stock.currentPrice);
    }, 0) || 0;
    
    const cryptosValue = account.cryptos?.reduce((total, crypto) => {
      // Use totalAmount if available, otherwise calculate from lots
      const totalAmount = crypto.totalAmount !== undefined 
        ? crypto.totalAmount 
        : crypto.lots?.reduce((sum, lot) => sum + lot.amount, 0) || 0;
      return total + (totalAmount * crypto.currentPrice);
    }, 0) || 0;
    
    return stocksValue + cryptosValue + (account.cash || 0);
  };

  // Helper function to refresh stock prices
  const refreshStockPrices = async () => {
    if (!account.stocks || account.stocks.length === 0) return;
    
    try {
      const symbols = account.stocks.map(stock => stock.ticker).join(',');
      const response = await fetch(`/api/stocks/prices?symbols=${symbols}`);
      
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }
      
      const data = await response.json();
      
      // Update stock prices
      const updatedStocks = account.stocks.map(stock => ({
        ...stock,
        currentPrice: data[stock.ticker] || stock.currentPrice
      }));
      
      // Update account with new stock prices
      const updatedAccount = {
        ...account,
        stocks: updatedStocks
      };
      
      // Update account in database
      await fetch(`/api/investments/${account.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedAccount)
      });
      
      // Refresh account data
      onAccountUpdated();
    } catch (error) {
      console.error('Error refreshing stock prices:', error);
    }
  };

  // Helper function to refresh crypto prices
  const refreshCryptoPrices = async () => {
    if (!account.cryptos || account.cryptos.length === 0) return;
    
    try {
      console.log('Refreshing crypto prices for:', account.cryptos);
      // Always use uppercase symbols for consistency
      const symbols = account.cryptos.map(crypto => crypto.symbol.toUpperCase()).join(',');
      console.log('Requesting prices for symbols:', symbols);
      
      // Show loading state
      toast.success('Refreshing crypto prices...', { duration: 2000 });
      
      const response = await fetch(`/api/crypto/prices?symbols=${symbols}`);
      
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('Received price data:', data);
      
      // Check if we got any prices back
      if (Object.keys(data).length === 0) {
        console.warn('No crypto prices returned from API');
        toast.error('No crypto prices available. Please try again later.');
        return;
      }
      
      // Update crypto prices
      const updatedCryptos = account.cryptos.map(crypto => {
        // Always look up by uppercase symbol
        const upperSymbol = crypto.symbol.toUpperCase();
        const newPrice = data[upperSymbol];
        console.log(`Symbol: ${crypto.symbol} (${upperSymbol}), Current price: ${crypto.currentPrice}, New price: ${newPrice}`);
        
        // Only update if we got a valid price
        if (newPrice !== undefined && newPrice !== null) {
          return {
            ...crypto,
            currentPrice: newPrice,
            lastUpdated: new Date()
          };
        }
        
        // Keep existing price if no new price
        return crypto;
      });
      
      console.log('Updated cryptos:', updatedCryptos);
      
      // Create a new account object with updated crypto prices
      const updatedAccount = {
        ...account,
        cryptos: updatedCryptos
      };
      
      // Update account in database
      const updateResponse = await fetch(`/api/investments/${account.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedAccount)
      });
      
      if (!updateResponse.ok) {
        console.error('Failed to update account:', await updateResponse.text());
        toast.error('Failed to update crypto prices');
        return;
      }
      
      console.log('Account updated successfully, refreshing UI');
      // Refresh account data to ensure everything is in sync
      onAccountUpdated();
      toast.success('Crypto prices updated successfully');
    } catch (error) {
      console.error('Error refreshing crypto prices:', error);
      toast.error('Failed to refresh crypto prices');
    }
  };

  const handleSaveAccountDetails = async () => {
    try {
      if (!account.id) return;
      
      await updateInvestmentAccount(account.id, {
        name: editedName,
        institution: editedInstitution,
        type: editedType,
      });
      
      setIsEditing(false);
      onAccountUpdated();
    } catch (error) {
      console.error('Error updating account details:', error);
    }
  };

  const handleCancelEdit = () => {
    setEditedName(account.name);
    setEditedInstitution(account.institution);
    setEditedType(account.type);
    setIsEditing(false);
  };

  // Handle delete account
  const handleDeleteAccount = async () => {
    if (!account.id) return;
    
    if (window.confirm(`Are you sure you want to delete this investment account? This action cannot be undone.`)) {
      try {
        await deleteInvestmentAccount(account.id);
        toast.success('Investment account deleted successfully');
        if (onAccountDeleted) {
          onAccountDeleted();
        }
      } catch (error) {
        console.error('Error deleting investment account:', error);
        toast.error('Failed to delete investment account');
      }
    }
  };

  const handleStockAdded = () => {
    setIsAddStockModalOpen(false);
    onAccountUpdated();
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
        <div className="mb-4 md:mb-0">
          {isEditing ? (
            <div className="space-y-3">
              <div>
                <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                  Account Name
                </label>
                <input
                  type="text"
                  id="name"
                  value={editedName}
                  onChange={(e) => setEditedName(e.target.value)}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                />
              </div>
              <div>
                <label htmlFor="institution" className="block text-sm font-medium text-gray-700">
                  Institution
                </label>
                <input
                  type="text"
                  id="institution"
                  value={editedInstitution}
                  onChange={(e) => setEditedInstitution(e.target.value)}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                />
              </div>
              <div>
                <label htmlFor="type" className="block text-sm font-medium text-gray-700">
                  Account Type
                </label>
                <select
                  id="type"
                  value={editedType}
                  onChange={(e) => setEditedType(e.target.value as InvestmentAccountType)}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                >
                  {Object.values(InvestmentAccountType).map((type) => (
                    <option key={type} value={type}>
                      {formatAccountType(type)}
                    </option>
                  ))}
                </select>
              </div>
              <div className="flex space-x-2">
                <button
                  onClick={handleSaveAccountDetails}
                  className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md text-sm"
                >
                  Save
                </button>
                <button
                  onClick={handleCancelEdit}
                  className="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-md text-sm"
                >
                  Cancel
                </button>
              </div>
            </div>
          ) : (
            <>
              <h2 className="text-2xl font-bold">{account.name}</h2>
              <p className="text-gray-600">
                {account.institution} • {formatAccountType(account.type)}
              </p>
            </>
          )}
        </div>
        
        <div className="flex flex-col items-end">
          <div className="text-2xl font-bold">
            ${calculateTotalValue().toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
          </div>
          <div className="text-sm text-gray-600">
            Total Value
          </div>
          {!isEditing && (
            <div className="flex flex-col items-end space-y-2">
              <button
                onClick={() => setIsEditing(true)}
                className="text-blue-500 hover:text-blue-700 text-sm"
              >
                Edit Account
              </button>
              <button
                onClick={handleDeleteAccount}
                className="text-red-500 hover:text-red-700 text-sm"
              >
                Delete Account
              </button>
            </div>
          )}
        </div>
      </div>
      
      <div className="flex border-b border-gray-200 mb-4">
        <button
          onClick={() => setActiveTab('stocks')}
          className={`px-4 py-2 ${activeTab === 'stocks' ? 'text-blue-600 border-b-2 border-blue-600 font-medium' : 'text-gray-500 hover:text-gray-700'}`}
        >
          {account.type === InvestmentAccountType.CRYPTO_WALLET ? 'Coins' : 'Stocks'}
        </button>

        <button
          onClick={() => setActiveTab('transactions')}
          className={`px-4 py-2 ${activeTab === 'transactions' ? 'text-blue-600 border-b-2 border-blue-600 font-medium' : 'text-gray-500 hover:text-gray-700'}`}
        >
          Transactions
        </button>
        <button
          onClick={() => setActiveTab('cash')}
          className={`px-4 py-2 ${activeTab === 'cash' ? 'text-blue-600 border-b-2 border-blue-600 font-medium' : 'text-gray-500 hover:text-gray-700'}`}
        >
          Cash Management
        </button>
      </div>

      {/* Main content area */}
      
      {activeTab === 'stocks' && (
        <div>
          {account.type === InvestmentAccountType.CRYPTO_WALLET ? (
            <>
              {selectedCrypto ? (
                <div className="mb-6">
                  <button
                    onClick={() => setSelectedCrypto(null)}
                    className="mb-4 flex items-center text-blue-600 hover:text-blue-800"
                  >
                    <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                    </svg>
                    Back to Coin List
                  </button>
                  
                  <CryptoDetail 
                    crypto={selectedCrypto} 
                    accountId={account.id || ''} 
                    onClose={() => setSelectedCrypto(null)} 
                    onUpdate={() => {
                      onAccountUpdated();
                      setSelectedCrypto(null);
                    }} 
                  />
                </div>
              ) : (
                <>
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-semibold">Coin Holdings</h3>
                    <div className="flex space-x-2">
                      <button
                        onClick={refreshCryptoPrices}
                        className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md text-sm"
                      >
                        Refresh Prices
                      </button>
                      <button
                        onClick={() => setIsAddCryptoModalOpen(true)}
                        className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md text-sm"
                      >
                        Add Coin
                      </button>
                    </div>
                  </div>
                  
                  {account.cryptos && account.cryptos.length > 0 ? (
                    <div className="overflow-x-auto">
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Coin
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Amount
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Avg. Cost
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Current Price
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Value
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Gain/Loss
                            </th>
                            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Actions
                            </th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {account.cryptos.map((crypto) => {
                            // Calculate total amount from lots if not provided directly
                            const totalAmount = crypto.totalAmount !== undefined 
                              ? crypto.totalAmount 
                              : crypto.lots?.reduce((sum, lot) => sum + lot.amount, 0) || 0;
                            
                            // Calculate average cost from lots if not provided directly
                            const avgCost = crypto.avgCost !== undefined 
                              ? crypto.avgCost 
                              : crypto.lots && crypto.lots.length > 0
                                ? crypto.lots.reduce((sum, lot) => sum + (lot.amount * lot.price), 0) / 
                                  crypto.lots.reduce((sum, lot) => sum + lot.amount, 0)
                                : 0;
                            
                            const currentValue = totalAmount * crypto.currentPrice;
                            const costBasis = totalAmount * avgCost;
                            const gainLoss = currentValue - costBasis;
                            const gainLossPercent = costBasis > 0 ? (gainLoss / costBasis) * 100 : 0;
                            
                            return (
                              <tr key={crypto.symbol} className="hover:bg-gray-50">
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <div className="flex items-center">
                                    <div className="ml-4">
                                      <div className="text-sm font-medium text-gray-900">{crypto.name}</div>
                                      <div className="text-sm text-gray-500">{crypto.symbol}</div>
                                    </div>
                                  </div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <div className="text-sm text-gray-900">{totalAmount.toFixed(8)}</div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <div className="text-sm text-gray-900">${avgCost.toFixed(2)}</div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <div className="text-sm text-gray-900">${crypto.currentPrice.toFixed(2)}</div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <div className="text-sm text-gray-900">${currentValue.toFixed(2)}</div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <div className={`text-sm ${gainLoss >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                                    ${gainLoss.toFixed(2)} ({gainLossPercent.toFixed(2)}%)
                                  </div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                  <div className="flex justify-end space-x-2">
                                    <button
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        setSelectedCrypto(crypto);
                                      }}
                                      className="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-md text-xs"
                                    >
                                      Details
                                    </button>
                                    <button
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        // Open sell modal directly
                                      }}
                                      className="text-green-600 hover:text-green-800 text-sm"
                                    >
                                      Sell
                                    </button>
                                    <button
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        if (confirm(`Are you sure you want to remove ${crypto.symbol}?`)) {
                                          // TODO: Implement remove functionality
                                          fetch(`/api/investments/${account.id}/cryptos/${crypto.symbol}`, {
                                            method: 'DELETE',
                                          })
                                            .then(response => {
                                              if (response.ok) {
                                                onAccountUpdated();
                                              } else {
                                                console.error('Failed to remove crypto');
                                              }
                                            })
                                            .catch(error => console.error('Error removing crypto:', error));
                                        }
                                      }}
                                      className="text-red-600 hover:text-red-800 text-sm"
                                    >
                                      Remove
                                    </button>
                                  </div>
                                </td>
                              </tr>
                            );
                          })}
                        </tbody>
                      </table>
                    </div>
                  ) : (
                    <div className="text-center py-8 bg-gray-50 rounded-lg border border-gray-200">
                      <p className="text-gray-500">No coins in portfolio yet.</p>
                      <p className="text-gray-500">Click "Add Coin" to add your first coin.</p>
                    </div>
                  )}
                  
                  <AddCryptoModal 
                    isOpen={isAddCryptoModalOpen} 
                    onClose={() => setIsAddCryptoModalOpen(false)} 
                    accountId={account.id || ''} 
                    onAdd={onAccountUpdated} 
                  />
                </>
              )}
            </>
          ) : (
            <>
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold">Stock Holdings</h3>
                <button
                  onClick={() => setIsAddStockModalOpen(true)}
                  className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md text-sm"
                >
                  Add Stock
                </button>
              </div>
              <StockList 
                stocks={account.stocks || []} 
                accountId={account.id || ''} 
                onStockUpdated={onAccountUpdated} 
              />
            </>
          )}
        </div>
      )}
      
      {activeTab === 'transactions' && (
        <TransactionHistory 
          transactions={account.transactions || []} 
          accountId={account.id || ''} 
        />
      )}
      
      {activeTab === 'cash' && (
        <CashManagement 
          accountId={account.id || ''} 
          currentCash={account.cash || 0}
          onCashUpdated={onAccountUpdated}
        />
      )}
    </div>
  );
};

export default InvestmentAccountDetails;
